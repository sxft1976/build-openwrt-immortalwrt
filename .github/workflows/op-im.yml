#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt
#============================================================================================

name: openwrt-immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "openwrt_24.10"
        type: choice
        options:
          - openwrt_daed
          - openwrt_main
          - openwrt_24.10
          - immortalwrt_master
          - immortalwrt_24.10
      
env:
  FEEDS_CONF: openwrt-immortalwrt/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: openwrt-immortalwrt/${{ inputs.source_branch }}/x86.config
  DIY_P1_SH: openwrt-immortalwrt/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: openwrt-immortalwrt/${{ inputs.source_branch }}/diy-part2.sh
  FILES: openwrt-immortalwrt/${{ inputs.source_branch }}/files
  RELEASE_TAG: immortalwrt-X86
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 准备结束
        uses: actions/checkout@main

      - name: 释放磁盘空间
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 6144
          swap-size-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          build-mount-path: '/workdir'

      - name: Checkout
        uses: actions/checkout@main
        
      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libncurses-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz genisoimage msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev clang-15 llvm-15 lld npm jq
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"

      - name: 克隆[ ${{ inputs.source_branch }} ]源码
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 设置编译源代码
          if [[ "${{ inputs.source_branch }}" == *"openwrt_daed"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="openwrt-24.10"
              TAGS_NAME="openwrt_daed"
          elif [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == *"openwrt_24.10"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="openwrt-24.10"
              TAGS_NAME="op-24.10"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt_24.10"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrtt"
              REPO_BRANCH="openwrt-24.10"
              TAGS_NAME="im-24.10"
          else
              echo "Unknown source code repository."
              exit 1
          fi

          # 克隆源代码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置输出信息
          #echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          #echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          #df -hT ${PWD}
          #echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 加载自定义源
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          [[ -d "${FILES}" ]] && mv -f ${FILES} openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Get architecture
        working-directory: ${{ github.workspace }}/openwrt
        run: |
         TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | sed 's/=y//g'| awk -F '_' '{print $1}')"
         echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV
         echo "MIXKEY=X86_64" >>$GITHUB_ENV 
         
      - name: cache
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: ${{ env.MIXKEY }}
          skip: 'true'
          toolchain: 'true'
          clean: 'false'
          prefix: ${{ github.workspace }}/openwrt

      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
         cd openwrt
         echo -e "$(nproc) thread compile"
         make -j$(nproc) || make -j1 || make -j1 V=s
         echo "status=success" >> $GITHUB_OUTPUT
         grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
         [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
         echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传bin目录
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 组织文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
          rm -rf packages
          rm -rf feeds.buildinfo
          rm -rf version.buildinfo
          rm -rf *kernel.bin
          rm -rf profiles.json
          rm -rf *rootfs.img
          rm -rf *rootfs.tar.gz
          rm -rf *.manifest
          rm -rf sha256sums
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: 上传固件目录
         uses: actions/upload-artifact@main
         if: steps.organize.outputs.status == 'success' && !cancelled()
         with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
         echo "release_tag=$RELEASE_TAG-$REPO_BRANCH-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
         touch release.txt
         [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
         echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
         retain_days: 0
         keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
